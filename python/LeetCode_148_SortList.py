class ListNode:
    def __init__(self, val=0, next=None):
        self.val = val
        self.next = next


def getMiddle(head):
    if (head == None):
        return head
    
    slow, fast = head, head 
    while (fast.next and fast.next.next):                 
        slow = slow.next
        fast = fast.next.next
    
    return slow


def merge(head):
    if (head == None or head.next == None):
        return head 

    mid = getMiddle(head)
    mid_next = mid.next

    mid.next = None

    left = merge(head)
    right = merge(mid_next)
    result = sort(left, right)
    return result  


def sort(x, y):
    if (x == None):
        return y 
    
    if (y == None):
        return x
    
    tmp = None
    if (x.val <= y.val):
        tmp = x 
        tmp.next = sort(x.next, y)
    else:
        tmp = y 
        tmp.next = sort(x, y.next)
    
    return tmp 























































































































































































































































































































































































































































































































































def sortList(head):
    return merge(head) 




x = ListNode(4)
x.next = ListNode(2)
x.next.next = ListNode(1)
x.next.next.next = ListNode(3)
sortList(x)